#!/bin/bash
#
# (C) 2015 Stefan Schallenberg
#

##### Execute on different machine ###########################################
function backup_remote {
	[ "$#" -lt 8 ] && return 1

	local remotemachine="$1"
	local remotesecret="$2"
	local bck_type="$3"
	local bck_src="$4"
	local bck_dst="$5"
	local bck_src_secret="$6"
	local bck_dst_secret="$7"
	local bck_histdate="$8"
	local bck_hist_keep="$9"
	shift 9

	if [ -z "$remotemachine" ] ||
	   [ -z "$remotesecret" ] ; then
		printf "Error: %s without machine (%s) and/or secret (%s)\n" \
			"trying to connect to remote" "$remotemachine" "$remotesecret"
		return 1
	fi

	#----- remove remotemachine from URL ---------------------------------
	bck_src="${bck_src##$remotemachine:}"
	bck_dst="${bck_dst##$remotemachine:}"

	#----- set hist parm if present ------
	local rem_hist=""
	if [ ! -z "$bck_histdate" ] ; then
		rem_hist="--histraw \"$bck_histdate\""
		if [ "$bck_hist_keep" == "1" ] ; then
			rem_hist+=" --histkeep"
		fi
	fi

	local rc
	printf "===== Start Executing on %s for %s %s =====\n" \
		"$remotemachine" "$bck_type" "$bck_src"
	local remdir rem_src_secret rem_dst_secret
	remdir=$(ssh -o StrictHostKeyChecking=no $remotemachine -i $remotesecret<<-EOF
		# this mktemp call works on both Linux and MacOS with slightly different
		# results:
		# Linux: nafets227.backup.<random>
		# MacOS: nafets227.backup.XXXXXXXXXX.<random>
		# but the delta is acceptable
		mktemp -d -t nafets227.backup.XXXXXXXXXX
		EOF
		) &&
	scp -o StrictHostKeyChecking=no -i $remotesecret \
		-r "$0" "$(dirname "$0")"/*.sh $remotemachine:$remdir &&
	{
		if [ -z "$bck_src_secret" ] ; then
			rem_src_secret=""
		else
			scp -o StrictHostKeyChecking=no -i $remotesecret \
				$bck_src_secret \
				$remotemachine:$remdir/srcsecret &&
			rem_src_secret="--srcsecret $remdir/srcsecret"
		fi
	} &&
	{
		if [ -z "$bck_dst_secret" ] ; then
			rem_dst_secret=""
		else
			scp -o StrictHostKeyChecking=no -i $remotesecret \
				$bck_dst_secret \
				$remotemachine:$remdir/dstsecret &&
			rem_dst_secret="--dstsecret $remdir/dstsecret"
		fi
	} &&
	ssh -o StrictHostKeyChecking=no $remotemachine -i $remotesecret<<-EOF &&
		[[ x"$DEBUG" == x1 ]] && set -x
		export DEBUG=$DEBUG
		# please note the trick to have a correct quoting on the
		# destination machine. Simply using \"\$@\" does not work.
		$remdir/backup_main backup --local \
			"$bck_type" \
			"$bck_src" \
			"$bck_dst" \
			$rem_src_secret \
			$rem_dst_secret \
			$rem_hist \
			$(
			for s in "$@" ; do
				printf " \"%s\"" "$s"
			done
			)
		exit \$?
		EOF
	local bck_secret &&
	{
		if [ -z "$bck_src_secret" ] ; then
			true
		else
			bck_secret=$(ssh -o StrictHostKeyChecking=no -i $remotesecret \
				$remotemachine cat $remdir/srcsecret)
			if [ "$?" != "0" ] ; then
				false
			elif cmp $bck_src_secret - >/dev/null <<<"$bck_secret" ; then
				printf "not updating untouched source secret %s locally\n" \
					"$bck_src_secret"
				true
			else
				printf "updating modified source secret %s locally\n" \
					"$bck_src_secret"
				cat >$bck_src_secret <<<"$bck_secret"
			fi
		fi
	} &&
	{
		if [ -z "$bck_dst_secret" ] ; then
			true
		else
			bck_secret=$(ssh -o StrictHostKeyChecking=no -i $remotesecret \
				$remotemachine cat $remdir/dstsecret)
			if [ "$?" != "0" ] ; then
				false
			elif cmp $bck_dst_secret - >/dev/null <<<"$bck_secret" ; then
				printf "not updating untouched dest %s secret locally\n" \
					"$bck_dst_secret"
				true
			else
				printf "updating modified dest secret %s locally\n" \
					"$bck_dst_secret"
				cat >$bck_dst_secret <<<"$bck_secret"
			fi
		fi
	}
	rc=$?
	printf "===== Returning with RC=%d from %s for %s %s =====\n" \
		"$rc" "$remotemachine" "$bck_type" "$bck_src"

	return $rc
}

##### Execute on this machine ################################################
function backup_local {
	[ "$#" -lt 6 ] && return 1

	local bck_type="$1"
	local bck_src="$2"
	local bck_dst="$3"
	local bck_src_secret="$4"
	local bck_dst_secret="$5"
	local bck_histdate="$6"
	local bck_hist_keep="$7"

	shift 7

	local bck_local_prm=()
	local bck_dst_full

	bck_local_prm+=( "$@" )
	shift $#

	if [ ! -z "$bck_histdate" ] ; then # History mode
		# bck_dst_full="$bck_dst/$bck_histdate.in-progress"
		bck_dst_full=$(
			backup_inithist "$bck_dst" "$bck_histdate" "$bck_hist_keep"
		) || return 1
	else
		bck_dst_full="$bck_dst"
	fi

	# Interface to type_specific drivers:
	#	backup2_<type>	function name
	#	bck_src		Source URL
	#	bck_dst		Destination URL
	#	bck_src_secret	Source Secret Filename
	#	bck_dst_secret	Destination Secret Filename
	#	[ ...]		type specific futher options
	backup2_$bck_type \
		"$bck_src" \
		"$bck_dst_full" \
		"$bck_src_secret" \
		"$bck_dst_secret" \
		"${bck_local_prm[@]}" \
		|| return 1

	if [ ! -z "$bck_histdate" ] && [ "$bck_dst_full" != "$bck_dst/$bck_histdate" ] ; then
		# History mode and we used a temporary dir for backup (.in-progress)
		mv "$bck_dst_full" "$bck_dst/$bck_histdate" || return 1
		printf "Backup in history mode successful - renamed to %s\n" \
			"$bck_dst/$bck_histdate" >&2
	fi

	return 0
}

##### Notify on Backup result and Deleted files via Email ####################
function backup_notify {
	if [ -z "$MAIL_TO" ] ; then
		printf "Mail Alerting not configured, not sending EMail (%s)\n" \
			 "set MAIL_TO to enable"
		return 0 # no notification
	elif [ -z "$MAIL_HOSTNAME" ] ; then
		MAIL_HOSTNAME="$(hostname)"
	fi

	if [ -z "$MAIL_FROM" ] ; then
		printf "Variable MAIL_FROM needs to be set if using Alerting indicated by MAIL_TO\n"
		return 1
	elif [ -z "$MAIL_URL" ] ; then
		printf "Variable MAIL_URL needs to be set if using Alerting indicated by MAIL_TO\n"
		return 1
	fi

	local MAIL_SUBJECT
	if [ "x$NAFETS227BACKUP_GRC" == "x0" ] ; then
		MAIL_SUBJECT="Backup successful"
	else
		MAIL_SUBJECT="Backup failed"
	fi

	(
		printf "Total Return Code (NAFETS227BACKUP_GRC): %d\n" \
			"$NAFETS227BACKUP_GRC"
		printf "\n%s\n" "$NAFETS227BACKUP_GMSG"
		printf "For details see backup-log\n"
	) | LC_ALL=C MAILRC=/dev/null mail \
		-n -Sv15-compat -Ssendwait -Snosave -Sexpandaddr=fail,-all,+addr \
		-S 'smtp-auth=none' \
		-S "smtp=$MAIL_URL" \
		-S "hostname=$MAIL_HOSTNAME" \
		-s "$MAIL_SUBJECT" \
		-r "$MAIL_FROM" $MAIL_TO \
		|| return 1

	printf "Sent Alerting email to %s\n" "$MAIL_TO"

	return 0
}

#### Helper: Check that runon is empty else print error ######################
function check_runon_empty {
	local bck_runon="$1"
	if [ ! -z "$bck_runon" ] ; then
		printf "Parm Conflict: More than one of %s\n" \
			"--runonsrc --runondst --local"
		return 1
	else
		return 0
	fi
}

##### Helper: Check that parm#2 is not empty #################################
function check_another_parm {
	local parms="$1"
	local parm1="$2"

	if [ "$parms" -lt 2 ] ; then
		printf "Error: parameter %s needs a value\n" \
			"$parm1"
		return 1
	else
		return 0
	fi
}

##### determine where to run if user did not specify #########################
function backup_default_runon {
	[ "$#" -lt 3 ] && return 1
	local bck_type="$1"
	local bck_dst="$2"
	local bck_src="$3"
	local bck_runon=""

	if [ "$bck_type" != file ] ; then
		bck_runon=1 # can only run on destination
	else
		if   [[ "$bck_dst" == *":"* ]] &&
		     [[ "$bck_src" == *":"* ]] ; then
			printf "Error: Missing option --runonsrc or --runondst %s\n" \
				"when copying from remote to remote" >&2
			return 1
		elif [[ "$bck_dst" != *":"* ]] &&
		     [[ "$bck_src" != *":"* ]] ; then
			bck_runon=0
		elif [[ "$bck_src" != *":"* ]] ; then
			bck_runon=-1
		elif [[ "$bck_dst" != *":"* ]] ; then
			bck_runon=1
		else
			printf "Internal Error at %s.\n" \
				"autodetecting runon" >&2
			return 99
		fi
	fi

	printf "%s\n" "$bck_runon"
	return 0
}

##### backup - entry point for custom script #################################
# backup <type> <source> <dest> [ global-options ] [ -- ] [ type-options ]
function backup {
	# This function is called by the custom script.

	#----- Parameter handling --------------------------------------------
	local bck_global_prm=0
	local bck_runon=""
	local bck_local_prm=()
	local bck_histdate=""
	local bck_hist_keep=0
	while [ $# -gt 0 ] ; do
		if [ "$1" == "--runonsrc" ] ; then # Execute on source
			check_runon_empty "$bck_runon" || return 1
			bck_runon=-1
			shift
		elif [ "$1" == "--runondst" ] ; then # Execute on destination
			check_runon_empty "$bck_runon" || return 1
			bck_runon=1
			shift
		elif [ "$1" == "--local" ] ; then # Run locally only
			check_runon_empty "$bck_runon" || return 1
			bck_runon=0
			shift
		elif [ "$1" == "--hist" ] ; then # Backup in history mode
			bck_histdate="$(date +%Y/%m/%d)" ||Â return 1
			shift
		elif [ "$1" == "--histdate" ] ; then
			check_another_parm "$#" "$1" || return 1
			bck_histdate="$(date +%Y/%m/%d "--date=$2")" || return 1
			shift 2
		elif [ "$1" == "--histraw" ] ; then
			check_another_parm "$#" "$1" || return 1
			bck_histdate="$2"
			shift 2
		elif [ "$1" == "--histkeep" ] ; then
			bck_hist_keep=1
			shift
		elif [ "$1" == "--srcsecret" ] ; then
			check_another_parm "$#" "$1" || return 1
			bck_src_secret="$2"
			shift 2
		elif [ "$1" == "--dstsecret" ] ; then
			check_another_parm "$#" "$1" || return 1
			bck_dst_secret="$2"
			shift 2
		elif [ "$1" == "--" ] ; then # end of global parms
			shift # ignore parm "--"
			bck_local_prm+=( "$@" )
			shift $#
		elif [ "$bck_global_prm" == 0 ] ; then
			local bck_type="$1"
			((bck_global_prm++))
			shift
		elif [ "$bck_global_prm" == 1 ] ; then
			local bck_src="$1"
			((bck_global_prm++))
			shift
		elif [ "$bck_global_prm" == 2 ] ; then
			local bck_dst="$1"
			((bck_global_prm++))
			shift
		else # unknown parm -> probably type-specific
			bck_local_prm+=( "$1" )
			shift
		fi
	done

	#----- Validations ---------------------------------------------------
	if [ "$bck_global_prm" != 3 ] ; then
		printf "%s %s :\n\t%s\n\t---%s %s %s\n" \
			"Error in custom config script" \
			"when calling backup with parms" \
			"$*" \
			"Missing non-option parms" \
			"(type, source, dest) - got " \
			"$bck_global_prm"
		NAFETS227BACKUP_GRC=1
		return 1
	elif [ ! -z "$bck_src_secret" ] && [ ! -f "$bck_src_secret" ] ; then
		printf "Error: Source Secret File %s not found.\n" \
			"$bck_src_secret"
		return 1
	elif [ ! -z "$bck_tgt_secret" ] && [ ! -f "$bck_tgt_secret" ] ; then
		printf "Error: Target Secret File %s not found.\n" \
			"$bck_tgt_secret"
		return 1
	elif	[ ! -z "$bck_histdate" ] && 
			[[ ! "$bck_histdate" =~ [0-9]{4}/[0-9]{2}/[0-9]{2} ]] ; then
		printf "Error: Invalid format %s in --hist* (not YYYY/MM/DD).\n" \
			"$bck_histdate"
		return 1
	elif [ "$bck_type" == imap ] ; then
		:
	elif [ "$bck_type" == rclone ] ; then
		:
	elif [ "$bck_type" == rclone_unittest_updateconf ] ; then
		:
	elif [ "$bck_type" == file ] ; then
		:
#	elif [ "$bck_type" != mysql-kube ] &&
	else
		printf "Wrong backup type %s " "$type"
		printf "when calling backup with\n\t%s\n" \
			"$*"
		NAFETS227BACKUP_GRC=1
		return 1
	fi

	#----- Autodetect where to run ---------------------------------------
	if [ -z "$bck_runon" ] ; then
		bck_runon=$(backup_default_runon $bck_type $bck_dst $bck_src)
		if [ "$?" != "0" ] ; then
			NAFETS227BACKUP_GRC=1
			return 1
		fi
	fi

	#----- Validation 2 after runon detection ----------------------------
	if [ "$bck_type" != file ] &&
	   [ "$bck_runon" == -1 ] ; then
		printf "Error: cannot run on source with type %s\n" \
			"$bck_type"
		NAFETS227BACKUP_GRC=1
		return 1
	fi

	#----- Execute on source, local or dest ------------------------------
	if [ "$bck_runon" == "-1" ] ; then
		if [[ "$bck_src" != *":"* ]] ; then
			backup_local \
				"$bck_type" \
				"$bck_src" \
				"$bck_dst" \
				"$bck_src_secret" \
				"$bck_dst_secret" \
				"$bck_histdate" \
				"$bck_hist_keep" \
				"${bck_local_prm[@]}"
			rc=$?
		else
			backup_remote \
				"${bck_src%%:*}" \
				"$bck_src_secret" \
				"$bck_type" \
				"$bck_src" \
				"$bck_dst" \
				"" \
				"$bck_dst_secret" \
				"$bck_histdate" \
				"$bck_hist_keep" \
				"${bck_local_prm[@]}"
			rc=$?
		fi
	elif [ "$bck_runon" == "0" ] ; then
			backup_local \
				"$bck_type" \
				"$bck_src" \
				"$bck_dst" \
				"$bck_src_secret" \
				"$bck_dst_secret" \
				"$bck_histdate" \
				"$bck_hist_keep" \
				"${bck_local_prm[@]}"
			rc=$?
	elif [ "$bck_runon" == "1" ] ; then
		if [[ "$bck_dst" != *":"* ]] ; then
			backup_local \
				"$bck_type" \
				"$bck_src" \
				"$bck_dst" \
				"$bck_src_secret" \
				"$bck_dst_secret" \
				"$bck_histdate" \
				"$bck_hist_keep" \
				"${bck_local_prm[@]}"
			rc=$?
		else
			backup_remote \
				"${bck_dst%%:*}" \
				"$bck_dst_secret" \
				"$bck_type" \
				"$bck_src" \
				"$bck_dst" \
				"$bck_src_secret" \
				"" \
				"$bck_histdate" \
				"$bck_hist_keep" \
				"${bck_local_prm[@]}"
			rc=$?
		fi
	else
		printf "Internal Error at %s.\n" \
			"starting execution"
		rc=99
	fi

	#----- Error handling and return -------------------------------------
	if [ $rc -ne 0 ] ; then
		NAFETS227BACKUP_GRC=1
		NAFETS227BACKUP_GMSG+="KO $bck_type $bck_src"$'\n'
		return 1
	else
		NAFETS227BACKUP_GMSG+="OK $bck_type $bck_src"$'\n'
		return 0
	fi

	# should not reach this
	return 99
}

##### Main ###################################################################
printf "starting ENTRYPOINT backup_main\n"

##### Parse Configs / Envirionment ###########################################
DEBUG=${DEBUG-0}

##### Ensure running on bash v4+ #############################################
if [[ ${BASH_VERSION:0:1} -lt "4" ]] ; then
	# Special workaround for MacOS:
	# system bash in /bin/bash is V3
	# but v4+ max be available in /usr/local/bin
	if [[ -x /usr/local/bin/bash ]] &&
	   bashver=$(/usr/local/bin/bash -c 'echo $BASH_VERSION') &&
	   [[ ${bashver:0:1} -ge 4 ]]
	then
		PATH="/usr/local/bin:$PATH" /usr/local/bin/bash "$0" "$@"
		exit $?
	else
		printf "bash version below 4: %s\n" "$BASH_VERSION"
		exit 1
	fi
elif ! which which &>/dev/null ; then
	printf "which not found in path.\n"
	exit 1
elif ! which true &>/dev/null || ! which false &>/dev/null ; then
	printf "true or false not found in path.\n"
	exit 1
fi

#Source all modules in install.d
for f in $(dirname $0)/*.sh ; do
    . $f
    if [ x$? != x0 ] ; then
	    printf "Error loading module %s\n" "$f"
	    exit 1
    fi
done

if [ x"$DEBUG" == x1 ] ; then
	set -x
fi

NAFETS227BACKUP_GRC=0
NAFETS227BACKUP_GMSG=""
##### Now start the custom scipt
if [ $# == 0 ] ; then
	printf "No command given.\n"
	exit 1
fi

printf "executing custom command %s\n" "$*"
"$@" || NAFETS227BACKUP_GRC=3

backup_notify || NAFETS227BACKUP_GRC=4

if [ "x$NAFETS227BACKUP_GRC" == "x0" ] ; then
	printf "Success: all Backup Tasks have been completed successfully.\n%s\n" \
		"$NAFETS227BACKUP_GMSG"
	exit 0
else
	printf "Error %d: " "$NAFETS227BACKUP_GRC"
	printf "not all Backup Tasks have been completed successfully.\n%s\n" \
		"$NAFETS227BACKUP_GMSG"
	exit 1
fi

#!/bin/bash
#
# (C) 2015 Stefan Schallenberg
#

##### Execute on different machine ###########################################
function backup_remote {
	remotemachine="$1"
	[ -z "remotemachine" ] && return 1
	shift

	scp -r $MODDIR/* $remotemachine:$REMOTE_MODDIR &&
	scp $BASH_SOURCE $remotemachine:$REMOTE_MODDIR/backup_main &&
	ssh $remotemachine <<-EOF &&
		DEBUG=$DEBUG
		$REMOTE_MODDIR/backup_main --local "$@"
		EOF
	/bin/true || return 1

	return 0
}

##### Execute on this machine ################################################
function backup_local {
	[ "$#" -lt 3 ] && return 1

	local bck_type="$1"
	local bck_src="$2"
	local bck_dst="$3"
	shift 3

	local bck_local_prm=()
	local bck_hist=0

	while [ $# -gt 0 ] ; do
		if [ "$1" == "--hist" ] ; then # historize
			bck_hist=1
			shift
		elif [ "$1" == "--" ] ; then # end of global parms
			bck_local_prm+=( "$@" )
			shift $#
		else # unknown parm -> probably type-specific
			bck_local_prm+=( "$1" )
			shift
		fi
	done

	backup2_$bck_type "$bck_src" "$bck_dst" "${bck_local_prm[@]}"

	return $?
}

##### Notify on Backup result and Deleted files via Email ####################
function backup_notify {
	# Options:
	#	--deleted List deleted files on remote system
	# Parms
	# 	1 - Sender Email adress, e.g. "my name <no-reply@example.org"
	#	2 - Recipient Email adress

	return 0
	# Old implementation as base follow
	###################################

	#if [ -s $LDIR/crypt.filestodelete ] ; then
	#printf "Sending EMail with list of deleted files.\n"
	#(
	#    printf "%s finished at %s\n\n" "$0" "$(date +"%Y-%m-%d %H:%M:%S")"
	#
	#    backup_rsync_print \
	#        $LDIR/crypt.filestodelete \
	#        "/srv/backup/data.crypt" \
	#        "remotebackup@stevro.dyndns.eu:/crypt"
	#
	#) 2>&1 </dev/null | mail \
	#    -r "nafets-backup-upload <no-reply@nafets.dyndns.eu>" \
	#    -s "Deleted files found" \
	#    infos@nafets.de
	#
	#else
	#    printf "No deleted Files. Not sending EMail.\n"
	#fi
	#
	#if [ -s $LDIR/euserv.fotos.filestodelete ] ||
	#   [ -s $LDIR/euserv.music.filestodelete ] ; then
	#printf "Sending EMail with list of deleted files.\n"
	#(
	#    printf "%s finished at %s\n\n" "$0" "$(date +"%Y-%m-%d %H:%M:%S")"
	#
	#    backup_rsync_print \
	#        $LDIR/euserv.fotos.filestodelete \
	#        "/srv/samba/data/fotos" \
	#        "remotebackup@stevro.dyndns.eu:/fotos"
	#
	#    backup_rsync_print \
	#        $LDIR/euserv.music.filestodelete \
	#        "/srv/samba/data/music" \
	#        "remotebackup@stevro.dyndns.eu:/music"
	#
	#) 2>&1 </dev/null | mail \
	#    -S smtp=smtp://mail.intranet.nafets.de \
	#    -S hostname=$HOSTNAME.dom.nafets.de \
	#    -r "nafets-backup-upload-euserv <no-reply@nafets.dyndns.eu>" \
	#    -s "Deleted files found" \
	#    infos@nafets.de
	#
	#else
	#    printf "No deleted Files. Not sending EMail.\n"
	#fi
	#}
}

##### backup - entry point for custom script #################################
# backup <type> <source> <target> [ global-options ] [ -- ] [ type-options ]
function backup {
	# This function is called by the custom script.
	if [ "$#" -lt 3 ] ; then
		printf "Error in custom config script. "
		printf "Calling backup with parms:\n\t%s\n"
			"$*"
		NAFETS227BACKUP_GRC=1
		return 1
	fi

	local bck_type="$1"
	local bck_src="$2"
	local bck_dst="$3"

	if [ "$bck_type" != imap ] &&
	   [ "$bck_type" != file ] &&
	   [ "$bck_type" != mysql-kube ] &&
	   [ "$bck_type" != notify ] ; then
		printf "Wrong backup type %s " "$type"
		printf "when calling backup with\n\t%s\n" \
			"$*"
		NAFETS227BACKUP_GRC=1
		return 1
	fi
	shift 3

	local bck_runon=0
	local bck_local=0
	local bck_local_prm=()
	while [ $# -gt 0 ] ; do
		if [ "$1" == "--runonsrc" ] ; then # historize
			bck_runon=-1
			shift
		elif [ "$1" == "--runontgt" ] ; then # historize
			bck_runon=1
			shift
		elif [ "$1" == "--local" ] ; then # historize
			bck_local=1
			shift
		elif [ "$1" == "--" ] ; then # end of global parms
			bck_local_prm+=( "$@" )
			shift $#
		else # unknown parm -> probably type-specific
			bck_local_prm+=( "$1" )
			shift
		fi
	done

	#check if we need to execut locally or remote
	if [ "$bck_type" != file ] ; then
		# all backup types except file can only run on target
		if [ $bck_runon == -1 ] ; then
			printf "Error: cannot run on source with type %s\n" \
				"$bck_type"
			NAFETS227BACKUP_GRC=1
			return 1
		fi

		if [[ "$bck_dst" == *":"* ]] ; then
			[ $bck_local == 1 ] && return 1
			backup_execremote \
				"${bck_dst%%:*}" \
				$bck_type \
				"$bck_src" \
				"${bck_dst##*:}" \
				"${bck_local_prm[@]}"
		else
			backup_local \
				"$bck_type" \
				"$bck_src" \
				"$bck_dst" \
				"${bck_local_prm[@]}"
		fi
	else # "$type" == file
		# file can run on source and target, so lets identify it
		if [[ "$bck_dst" == *":"* ]] &&
			[[ "$bck_src" == *":"* ]] ; then
			# Backing up from remote to remote
			# --> Need to know where to run
			if [ $bck_runon == 0 ] ; then
				printf "Error: Missing option --runonsrc or "
				printf "--runontgt when copying from remote "
				printf "to remote\n"
				NAFETS227BACKUP_GRC=1
				return 1
			elif [ $bck_runon == -1 ] ; then
				# run on source
				[ $bck_local == 1 ] && return 1
				backup_execremote \
					"${bck_src%%:*}" \
					$bck_type \
					"${bck_src##*:}" \
					"$bck_dst" \
					"${bck_local_prm[@]}"
			elif [ $bck_runon == -1 ] ; then
				# run on dest
				[ $bck_local == 1 ] && return 1
				backup_execremote \
					"${bck_dst%%:*}" \
					$bck_type \
					"$bck_src" \
					"${bck_dst##*:}" \
					"${bck_local_prm[@]}"
			else
				printf "Internal Error \n"
				NAFETS227BACKUP_GRC=1
				return 1
			fi
		else
			# backup up from remote to local
			# --- or ---
			# backup up from local to remote
			# --- or ---
			# backup from local to local
			backup_local \
				"$bck_type" \
				"$bck_src" \
				"$bck_dst" \
				"${bck_local_prm[@]}"
		fi

	fi

	if [ $? -ne 0 ] ; then
		NAFETS227BACKUP_GRC=1
		return 1
	fi

	return 0
}

##### Main ###################################################################
printf "starting ENTRYPOINT backup_main\n"
readonly MODDIR=/usr/lib/nafets227.backup
readonly REMOTE_MODDIR=/usr/local/lib/nafets227.backup

##### Parse Configs / Envirionment ###########################################
DEBUG=${DEBUG-0}
debug=$DEBUG

#Source all modules in install.d
for f in $MODDIR/*.sh ; do
    echo "Loading Module $f"
    . $f
    if [ x$? != x0 ] ; then
	    printf "Error loading module %s\n" "$f"
	    exit 1
    fi
done

if [ x"$DEBUG" == x1 ] ; then
	set -x
fi

NAFETS227BACKUP_GRC=0
##### Now start the custom scipt
if [ $# -ge 1 ] ; then
	printf "executing custom command %s\n" "$*"
	"$@"
else
	printf "executing standard command backup/backup\n"
	. backup/backup || NAFETS227BACKUP_GRC=2
fi

if [ "x$NAFETS227BACKUP_GRC" == "x0" ] ; then
	printf "Success: all Backup Tasks have been completed successfully.\n"
	exit 0
else
	printf "Error %d: " "$NAFETS227BACKUP_GRC"
	printf "not all Backup Tasks have been completed successfully.\n"
	exit 1
fi


#!/bin/bash

#
# Backup in Docker container
#
# (C) 2017 Stefan Schallenberg
#
# Test script

##### Test Init ##############################################################
# Initialise tests including any necessary workaround
function test_init {

	my_fileopt=""

	if 	[[ "$OSTYPE" =~ darwin* ]] ; then
		my_ip="$USER@$(ipconfig getifaddr en0 en1)" &&
		test ! -z "$my_ip"
		test_assert "$?" "Could not get IP with command ipconfig on MacOS" \
		|| return 1
		my_fileopt="--macos"
	elif which "ip" >/dev/null ; then
		my_ip="$USER@$(set -o pipefail
			ip -4 -j a show dev docker0 primary |
			jq '.[].addr_info[0].local')" &&
		my_ip=${my_ip//\"}
		test_assert "$?" "Could not get IP with command ip" \
		|| return 1
	else
		my_ip=""
		test_assert "1" "Could not get IP (not on MacO and command ip missing)"
		return 1
	fi

	my_host="$HOSTNAME" &&
	test ! -z "$my_host"
	test_assert "$?" "Could not get hostname" \
	|| return 1

	return 0
}

##### Test chowner ###########################################################
# Parameters:
#     1 - test file to chown
function test_chown {
	local fname="$1"

	test -n "$fname"
	test_assert "$?" "Internal Error - fname not given" >&2

	if 	! [[ "$OSTYPE" =~ darwin* ]] ; then
		chown 41598:41598 "$fname"
		test_assert "$?" "chown failed: $fname" >&2 || return 1
	else
		test_assert "0" "dont chown on MacOS: $fname" >&2 || return 1
	fi

	return 0
}

##### Test Executer ##########################################################
# Parameters:
#     1 - command in custom backup shell
#     2 - expected RC [default: 0]
function test_exec_backupdocker {
	if [ "$#" -lt 1 ] ; then
		test_assert "1" "got %s parms (exp 1+)" >&2 || return 1
	fi
	rc_exp="$1"
	shift

	if \
		! cat >"$TESTSET_DIR/backup/backup" <<<"$@" ||
		! chmod +x "$TESTSET_DIR/backup/backup"
	then
		printf "test_assert %s \"%s\"\n" "$?" "Write backup script"
		return 1
	fi

	if ! cp ~/.ssh/id_rsa "$TESTSET_DIR/id_rsa"
	then
		printf "test_assert %s \"%s\"\n" "$?" "Copy SSH Key"
		return 1
	fi
	if 	! [[ "$OSTYPE" =~ darwin* ]] ; then
		if ! chown 41598:41598 "$TESTSET_DIR/id_rsa" ; then
			printf "test_assert %s \"%s\"\n" "$?" "chown SSH Key"
			return 1
		else
			printf "test_assert %s \"%s\"\n" "0" "not chowning SSH Key"
		fi
	else
		printf "test_assert %s \"%s\"\n" "0" "not chowning SSH Key"
	fi

	printf "test_exec_cmd"
	printf  " \"%s\"" \
		"$rc_exp" "Backup Command $*" \
		docker run \
			-v "$TESTSET_DIR/backup:/backup" \
			-v "$TESTSET_DIR/id_rsa:/secrets/id_rsa:ro" \
			-e DEBUG=1 \
			-e MAIL_TO \
			-e MAIL_FROM \
			-e MAIL_URL \
			-e MAIL_HOSTNAME \
			"$TESTIMG" \
			. /backup/backup

	return 0
}

##### Test Build #############################################################
function test_build {

	if [ -z "$1" ] ; then
		# Compile / Build docker
		test_exec_cmd 0 "" \
			docker build -t nafets227/backup:test "$BASEDIR/.."
		test_exec_issuccess || return 1
		TESTIMG="nafets227/backup:test"
	else
		test_exec_cmd 0 "" true
		TESTIMG=$1
	fi

	return 0
}

##### Test: no custom script #################################################
function test_runempty {
	test_exec_cmd 1 "" \
		docker run "$TESTIMG"

	return $?
}

##### Test: Email alerting ###################################################
function test_email {
	if \
		! test_assert_tools "curl" "$TEST_SNAIL"
	then
		printf "\tSkipping IMAP Tests.\n"
		return 0
	fi

	local imappw imapurl smtppw smtpurl

	imappw="$(cat "$TESTALERTMAIL_IMAP_SECRET")"
	imapurl="imap://${TESTALERTMAIL_ADR//@/%40}"
	imapurl+=":$($TEST_SNAIL -# <<<"urlcodec encode $imappw")"
	imapurl+="@$TESTALERTMAIL_IMAP_URL/INBOX"

	smtppw="$($TEST_SNAIL -# <<<"urlcodec encode $imappw")"
	smtpurl="smtp://${TESTALERTMAIL_USER//@/%40}:$smtppw@$TESTALERTMAIL_URL"

	test_cleanImap "$TESTALERTMAIL_ADR" "$imappw" "$TESTALERTMAIL_IMAP_URL"
	test_assert "$?" "clean IMAP" || return 1

	# Trigger Error Email with empty command and unset MAIL_SSL
	export MAIL_TO=$TESTALERTMAIL_ADR
	export MAIL_URL="$TESTALERTMAIL_URL"
	unset MAIL_SSL
	export MAIL_FROM="$TESTALERTMAIL_FROM"
	eval "$(test_exec_backupdocker 0 "")"

	sleep 10 # let mail be processed

	test_exec_recvmail "$imapurl" 0 "-S 'imap-use-starttls'"
	test_cleanImap "$TESTALERTMAIL_ADR" "$imappw" "$TESTALERTMAIL_IMAP_URL"

	# @TODO Trigger Error Email eith MAIL_SSL=0

	# Trigger Error Email with empty command and send with STARTTLS
	export MAIL_TO=$TESTALERTMAIL_ADR
	export MAIL_URL="$smtpurl"
	export MAIL_SSL=1
	export MAIL_FROM="$TESTALERTMAIL_FROM"
	eval "$(test_exec_backupdocker 0 "")"

	sleep 10 # let mail be processed

	test_exec_recvmail "$imapurl" 0 "-S 'imap-use-starttls'"
	test_cleanImap "$TESTALERTMAIL_ADR" "$imappw" "$TESTALERTMAIL_IMAP_URL"

	# @TODO execute test succeeding and verify EMail sent
	#eval $(test_exec_backupdocker 0 \
	#	"backup file" \
	#	"$source" \
	#	"$dest" \
	#	"$@" \
	#	) &&
	#test_expect_files "backup/file/dest" 0
	#
	#sleep 10 &&
	#
	#test_exec_recvmail "$mailimapurl" 0 "-S 'imap-use-starttls'"
	#test_cleanImap "$TESTALERTMAIL_ADR" "$imappw" "$TESTALERTMAIL_IMAP_URL"

	# @ TODO test MAIL_HOSTNAME

	unset MAIL_TO MAIL_URL MAIL_FROM # works even for exported vars

	return 0
}

##### Main ###################################################################
BASEDIR=$(dirname "${BASH_SOURCE[0]}")

for f in "$BASEDIR"/*.sh ; do
	#shellcheck disable=SC1090 # shellcheck cant follow dynamic includes
	. "$f" || exit 1
done

testset_init || exit 1

test_assert_vars \
	TESTIMAP_SRC \
	TESTIMAP_SECRET \
	TESTIMAP_URL \
	&&
test_assert_vars \
	TESTRCLONE_CONF \
	TESTRCLONE_NAME \
	&&
test_assert_vars \
	TESTALERTMAIL_ADR \
	TESTALERTMAIL_FROM \
	TESTALERTMAIL_URL \
	TESTALERTMAIL_USER \
	TESTALERTMAIL_SECRET \
	TESTALERTMAIL_IMAP_URL \
	TESTALERTMAIL_IMAP_SECRET \
	&&
# TESTALERTMAIL_HOSTNAME can be intendedly empty so dont check it

if [ ! -d "$TESTSET_DIR/backup" ] ; then
	mkdir "$TESTSET_DIR/backup" || exit 1
fi
test_chown "$TESTSET_DIR/backup" &&
test_chown "$TESTRCLONE_CONF" &&
test_build "$1" &&
test_init &&
true

#shellcheck disable=SC2181 # using $? here helps to keep the structure
if [ "$?" == "0" ] ; then
	test_runempty
	test_email
	unset MAIL_TO MAIL_URL # disable mailing for following tests
	test_rclone2file
	test_rclone2file_hist
	test_file2rclone
	test_file
	test_file_hist
	test_imap
	test_imap_hist
	: "$my_fileopt" # make shellcheck happy, its used in test-file*.sh
fi

testset_summary
exit $?

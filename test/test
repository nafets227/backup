#!/bin/bash

#
# Backup in Docker container
#
# (C) 2017 Stefan Schallenberg
#
# Test script

##### Test Init ##############################################################
# Initialise tests including any necessary workaround
function test_init {

	if which "ip" >/dev/null ; then
		my_ip="$USER@$(set -o pipefail
			ip -4 -j a show dev docker0 primary |
			jq '.[].addr_info[0].local')" &&
		my_ip=${my_ip//\"}
		test_assert "$?" "Could not get IP with command ip" || return 1
	elif which "ipconfig" >/dev/null ; then
		my_ip="$USER@$(ipconfig getifaddr en0 en1)" &&
		test ! -z "$my_ip"
		test_assert "$?" "Could not get IP with command ipconfig" || return 1
	else
		my_ip=""
	fi

	return 0
}

##### Test Executer ##########################################################
# Parameters:
#     1 - command in custom backup shell
#     2 - expected RC [default: 0]
function test_exec_backupdocker {
	if [ "$#" -lt 1 ] ; then
		test_assert "1" "got %s parms (exp 1+)" >&2 || return 1
	fi
	rc_exp="$1"
	shift

	cat >$TESTSETDIR/backup/backup <<<"$@" &&
	chmod +x $TESTSETDIR/backup/backup </dev/null
	test_assert "$?" "Write backup script" >&2 || return 1

	local docker_cmd=""
	docker_cmd+="docker run"
	docker_cmd+=" -v $TESTSETDIR/backup:/backup"
	docker_cmd+=" -v ~/.ssh/id_rsa:/secrets/id_rsa:ro"
	docker_cmd+=" -e DEBUG=1"
	docker_cmd+=" -e MAIL_TO"
	docker_cmd+=" -e MAIL_FROM"
	docker_cmd+=" -e MAIL_URL"
	docker_cmd+=" -e MAIL_HOSTNAME"
	docker_cmd+=" $TESTIMG"
	docker_cmd+=" . /backup/backup"

	printf "test_exec_simple \"%s\" \"%s\" \"%s\"" \
		"$docker_cmd" \
		"$rc_exp" \
		"Backup Command $*"

	return $TESTRC
}

##### Test Build #############################################################
function test_build {

	if [ -z "$1" ] ; then
		# Compile / Build docker
		test_exec_simple \
			"docker build -t nafets227/backup:test $BASEDIR/.." \
			0
		[ $TESTRC -eq 0 ] || return 1
		TESTIMG="nafets227/backup:test"
	else
		TESTIMG=$1
	fi

	return 0
}

##### Test: no custom script #################################################
function test_runempty {
	test_exec_simple \
		"docker run $TESTIMG" \
		1
	
	return $?
}

##### Test: Email alerting ###################################################
function test_email {
	if ! test_assert_vars "MAIL_ADR" "MAIL_PW" "MAIL_SRV" "MAIL_URL" ||
	   ! test_assert_tools "curl" "$TEST_SNAIL" ; then
		printf "\tSkipping IMAP Tests.\n"
		return 0
	fi

	test_cleanImap "$MAIL_ADR" "$(cat $MAIL_PW)" "$MAIL_SRV"
	test_assert "$?" "clean IMAP" || return 1

	# Trigger Error Email with empty command
	export MAIL_TO=$MAIL_ADR
	export MAIL_URL="smtp://$MAIL_URL"
	export MAIL_FROM
	eval $(test_exec_backupdocker 0 "")

	sleep 10 # let mail be processed

	mail_pwd="$($TEST_SNAIL -# <<<"urlcodec encode $(cat $MAIL_PW)")"
	mailimapurl="imap://${MAIL_TO//@/%40}:$mail_pwd@$MAIL_SRV/INBOX"
	test_exec_recvmail "$mailimapurl" 0 "-S 'imap-use-starttls'"
	test_cleanImap "$MAIL_ADR" "$(cat $MAIL_PW)" "$MAIL_SRV"

	# @TODO execute test succeeding and verify EMail sent
	#eval $(test_exec_backupdocker 0 \
	#	"backup file" \
	#	"$source" \
	#	"$dest" \
	#	"$@" \
	#	) &&
	#test_expect_files "backup/file/dest" 0
	#
	#sleep 10 &&
	#
	#test_exec_recvmail "$mailimapurl" 0 "-S 'imap-use-starttls'"
	#test_cleanImap "$MAIL_ADR" "$(cat $MAIL_PW)" "$MAIL_SRV"

	unset MAIL_TO MAIL_URL

	return 0
}

##### Main ###################################################################
BASEDIR=$(dirname $BASH_SOURCE)
. $BASEDIR/../util/test-functions.sh || exit 1

MAIL_FROM="${MAIL_FROM:-"nafets227/backup CI <no-reply@nafets.de>"}"
MAIL_ADR="${MAIL_ADR:-"nafets227.backup.test@nafets.de"}"
MAIL_PW="${MAIL_PW:-"$BASEDIR/mail.password"}"
MAIL_SRV="${MAIL_SRV:-nafets.de:143}"
MAIL_URL="${MAIL_URL:-nafets.de}"
RCLONE_CONF="${RCLONE_CONF:-"$BASEDIR/rclone.conf"}"
RCLONE_NAME="${RCLONE_NAME:-"nafets227_nafets_de:/"}"

for f in $BASEDIR/*.sh ; do
	. $f || exit 1
done

testset_init || exit 1
if [ ! -d $TESTSETDIR/backup ] ; then
	mkdir $TESTSETDIR/backup || return 1
fi

if test_build "$1" && test_init ; then
	test_runempty
	test_email
	test_rclone2file
	test_rclone2file_hist
	test_file
	test_file_hist
	test_imap
	test_imap_hist
fi

testset_summary
exit $?

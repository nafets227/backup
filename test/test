#!/bin/bash

#
# Backup in Docker container
#
# (C) 2017 Stefan Schallenberg
#
# Test script

##### Test Init ##############################################################
# Initialise tests including any necessary workaround
function test_init {

	my_fileopt=""

	if 	[[ "$OSTYPE" =~ darwin* ]] ; then
		my_ip="$USER@$(ipconfig getifaddr en0 en1)" &&
		test ! -z "$my_ip"
		test_assert "$?" "Could not get IP with command ipconfig on MacOS" \
		|| return 1
		my_fileopt="--macos"
	elif which "ip" >/dev/null ; then
		my_ip="$USER@$(set -o pipefail
			ip -4 -j a show dev docker0 primary |
			jq '.[].addr_info[0].local')" &&
		my_ip=${my_ip//\"}
		test_assert "$?" "Could not get IP with command ip" \
		|| return 1
	else
		my_ip=""
		test_assert "1" "Could not get IP (not on MacO and command ip missing)"
		return 1
	fi

	my_host="$HOSTNAME" &&
	test ! -z "$my_host"
	test_assert "$?" "Could not get hostname" \
	|| return 1

	return 0
}

##### Test Executer ##########################################################
# Parameters:
#     1 - command in custom backup shell
#     2 - expected RC [default: 0]
function test_exec_backupdocker {
	if [ "$#" -lt 1 ] ; then
		test_assert "1" "got %s parms (exp 1+)" >&2 || return 1
	fi
	rc_exp="$1"
	shift

	cat >"$TESTSETDIR/backup/backup" <<<"$@" &&
	chmod +x "$TESTSETDIR/backup/backup"
	test_assert "$?" "Write backup script" >&2 || return 1

	cp ~/.ssh/id_rsa "$TESTSETDIR/id_rsa"
	test_assert "$?" "Copy SSH Key" >&2 || return 1
	if 	! [[ "$OSTYPE" =~ darwin* ]] ; then
		chown 41598:41598 "$TESTSETDIR/id_rsa"
		test_assert "$?" "chown SSH Key" >&2 || return 1
	fi

	printf "test_exec_cmd"
	printf  " \"%s\"" \
		"$rc_exp" "Backup Command $*" \
		docker run \
			-v "$TESTSETDIR/backup:/backup" \
			-v "$TESTSETDIR/id_rsa:/secrets/id_rsa:ro" \
			-e DEBUG=1 \
			-e MAIL_TO \
			-e MAIL_FROM \
			-e MAIL_URL \
			-e MAIL_HOSTNAME \
			"$TESTIMG" \
			. /backup/backup

	return "$TESTRC"
}

##### Test Build #############################################################
function test_build {

	if [ -z "$1" ] ; then
		# Compile / Build docker
		test_exec_cmd 0 "" \
			docker build -t nafets227/backup:test "$BASEDIR/.."
		[ "$TESTRC" -eq 0 ] || return 1
		TESTIMG="nafets227/backup:test"
	else
		TESTIMG=$1
	fi

	return 0
}

##### Test: no custom script #################################################
function test_runempty {
	test_exec_cmd 1 "" \
		docker run "$TESTIMG"
	
	return $?
}

##### Test: Email alerting ###################################################
function test_email {
	if ! test_assert_vars "MAIL_ADR" "MAIL_PW" "MAIL_SRV" "MAIL_URL" ||
	   ! test_assert_tools "curl" "$TEST_SNAIL" ; then
		printf "\tSkipping IMAP Tests.\n"
		return 0
	fi

	test_cleanImap "$MAIL_ADR" "$(cat "$MAIL_PW")" "$MAIL_SRV"
	test_assert "$?" "clean IMAP" || return 1

	# Trigger Error Email with empty command
	export MAIL_TO=$MAIL_ADR
	export MAIL_URL="smtp://$MAIL_URL"
	export MAIL_FROM
	eval "$(test_exec_backupdocker 0 "")"

	sleep 10 # let mail be processed

	mail_pwd="$($TEST_SNAIL -# <<<"urlcodec encode $(cat "$MAIL_PW")")"
	mailimapurl="imap://${MAIL_TO//@/%40}:$mail_pwd@$MAIL_SRV/INBOX"
	test_exec_recvmail "$mailimapurl" 0 "-S 'imap-use-starttls'"
	test_cleanImap "$MAIL_ADR" "$(cat "$MAIL_PW")" "$MAIL_SRV"

	# @TODO execute test succeeding and verify EMail sent
	#eval $(test_exec_backupdocker 0 \
	#	"backup file" \
	#	"$source" \
	#	"$dest" \
	#	"$@" \
	#	) &&
	#test_expect_files "backup/file/dest" 0
	#
	#sleep 10 &&
	#
	#test_exec_recvmail "$mailimapurl" 0 "-S 'imap-use-starttls'"
	#test_cleanImap "$MAIL_ADR" "$(cat $MAIL_PW)" "$MAIL_SRV"

	unset MAIL_TO MAIL_URL

	return 0
}

##### Main ###################################################################
BASEDIR=$(dirname "${BASH_SOURCE[0]}")

MAIL_FROM="${MAIL_FROM:-"nafets227/backup CI <no-reply@nafets.de>"}"
MAIL_ADR="${MAIL_ADR:-"nafets227.backup.test@nafets.de"}"
MAIL_PW="${MAIL_PW:-"$BASEDIR/mail.password"}"
MAIL_SRV="${MAIL_SRV:-nafets.de:143}"
MAIL_URL="${MAIL_URL:-nafets.de}"
RCLONE_CONF="${RCLONE_CONF:-"$BASEDIR/rclone.conf"}"
RCLONE_NAME="${RCLONE_NAME:-"nafets227_nafets_de:/"}"

for f in "$BASEDIR"/*.sh ; do
	#shellcheck disable=SC1090 # shellcheck cant follow dynamic includes
	. "$f" || exit 1
done

testset_init || exit 1
if [ ! -d "$TESTSETDIR/backup" ] ; then
	mkdir "$TESTSETDIR/backup" || return 1
fi
if 	! [[ "$OSTYPE" =~ darwin* ]] ; then
	chown 41598:41598 "$TESTSETDIR/backup" "$RCLONE_CONF"
	test_assert "$?" "chown TESTSETDIR/backup" >&2 || return 1
fi

: "$my_fileopt" # make shellcheck happy, its used in test-file*.sh
if test_build "$1" && test_init ; then
	test_runempty
	test_email
	test_rclone2file
	test_rclone2file_hist
	test_file2rclone
	test_file
	test_file_hist
	test_imap
	test_imap_hist
fi

testset_summary
exit $?

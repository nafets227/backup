---
name: Docker-ci

on:
  push:
    branches: 
      - '*'
    tags: 
      - 'v*'
  pull_request:
    branches:
      - '*'

permissions: read-all

# avoid to run multiple jobs in parallel that would interfere with each other
# in the test step, since they would use the same test Email and OneDrive.
concurrency: ci

jobs:
  docker-build-ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      statuses: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
  
      - name: SuperLint
        uses: super-linter/super-linter/slim@v7.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: true
          USE_FIND_ALGORITHM: true
          FILTER_REGEX_EXCLUDE: ".*/(offlineimap3|util)/.*"
          VALIDATE_SHELL_SHFMT: false
          #DEFAULT_BRANCH: master
          #KUBERNETES_KUBECONFORM_OPTIONS: "
          #  -ignore-filename-pattern util/kube/helmupdate-cronjob-template.yaml
          #  -ignore-filename-pattern kube/haproxy-helm-values-template.yaml
          #  -ignore-filename-pattern ghrunner/kube/ghrunner-template.yaml
          #  -ignore-filename-pattern kube/kube-auth.template.yaml
          #  "

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: setup
        id: setup
        run: |
          sudo apt install s-nail rclone offlineimap

      - name: test
        id: test
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
          GH_TOKEN: ${{ secrets.GH_SECRET_ADMIN_TOKEN }}
          MAIL_PW: ${{ secrets.MAIL_PW }}
          IMGURL: "ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version}}"
        run: |
          [ "$RUNNER_DEBUG" == 1 ] && DEBUGSH="set -x ; " && set -x

          if [ -z "$RCLONE_CONF" ] ; then
            printf "secret variable RCLONE_CONF not set\n"
            exit 1
          elif [ -z "$GH_TOKEN" ] ; then
            printf "secret variable GH_SECRET_ADMIN_TOKEN not set\n"
            exit 1
          elif [ -z "$MAIL_PW" ] ; then
            printf "secret variable MAIL_PW not set\n"
            exit 1
          fi

          cat >test/rclone.conf <<<"$RCLONE_CONF"
          cat >test/mail.password <<<"$MAIL_PW"
          unset RCLONE_CONF MAIL_PW

          sudo bash -c 'ssh-keygen -N "" -f ~/.ssh/id_rsa'
          sudo bash -c 'cat ~/.ssh/id_rsa.pub >>~/.ssh/authorized_keys'
          sudo bash -c 'touch ~/.hushlogin'

          sudo bash -c "$DEBUGSH . test/test $IMG_URL"
          
          gh secret set RCLONE_CONF < test/rclone.conf
          rm test/rclone.conf test/mail.password

      - name: Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
